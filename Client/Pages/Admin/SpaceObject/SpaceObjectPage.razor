@page "/admin/spaceObjects/{ID:guid}/edit"
@page "/admin/spaceObjects/create"

@using Refit
@using AutoMapper
@using System.ComponentModel.DataAnnotations

<PageTitle>@PageTitle</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudGrid>
            <MudItem>
                <MudFab DisableElevation="true"
                        StartIcon="@Icons.Material.Filled.ArrowBack"
                        Href="/admin/spaceObjects"/>
            </MudItem>
            <MudItem>
                <MudText Typo="Typo.h3">@PageTitle</MudText>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem>
        <EditForm Model="@Model" OnValidSubmit="OnValidSumbit">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Название" @bind-Value="Model.Name" For="() => Model.Name"/>

                    <MudNumericField
                        Label="Возраст"
                        @bind-Value="Model.Age"
                        For="() => Model.Age"/>
                    
                    <MudAutocomplete
                        Label="Тип"
                        ResetValueOnEmptyText="true"
                        @bind-Value="@Model.Type"
                        SearchFunc="SearchSpaceObjectType"
                        ToStringFunc="@(status => status.GetAttribute<DisplayAttribute>().Name)"/>
                    <MudAutocomplete
                        Label="Звёздная система"
                        ResetValueOnEmptyText="true"
                        @bind-Value="@SelectedStarSystem"
                        SearchFunc="SearchStarSystem"/>
                </MudCardContent>
                <MudCardActions>
                    <MudFab ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled"
                            DisableElevation="true"
                            StartIcon="@Icons.Material.Filled.Save"
                            Text="Сохранить"
                            Color="Color.Primary"/>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>

@code
{
    [Parameter]
    public Guid? ID { get; set; }

    public bool IsEdit => ID != null;

    public string PageTitle => IsEdit ? "Изменение космического объекта" : "Создание космического объекта";

    public SpaceObjectEditModel Model { get; set; } = new();
    public List<StarSystemViewModel> StarSystems { get; set; } = new();

    public List<SpaceObjectType> SpaceObjectTypes { get; set; } = new(Enum.GetValues<SpaceObjectType>());

    [Inject]
    public ISpaceObjectController ModelController { get; set; }

    [Inject]
    public IStarSystemController StarSystemController { get; set; }

    [Inject]
    public IMapper Mapper { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    public StarSystemViewModel? SelectedStarSystem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDates();
    }

    private async Task LoadDates()
    {
        try
        {
            StarSystems = await StarSystemController.Get();

            if (IsEdit)
            {
                Model = Mapper.Map<SpaceObjectEditModel>(await ModelController.GetByID(ID.GetValueOrDefault()));
                SelectedStarSystem = StarSystems.FirstOrDefault(x => x.ID == Model.StarSystemID);
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
        }
    }

    private async Task<IEnumerable<SpaceObjectType>> SearchSpaceObjectType(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            return SpaceObjectTypes;
        }

        return SpaceObjectTypes.Where(x =>
            x.GetAttribute<DisplayAttribute>().Name
                .Contains(arg, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<StarSystemViewModel>> SearchStarSystem(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            return StarSystems;
        }

        return StarSystems.Where(x =>
            $"{x.Name} {x.Age} {x.CenterOfMasses?.Name}"
                .Contains(arg, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnValidSumbit()
    {
        if (SelectedStarSystem == null)
        {
            Snackbar.Add("Звёздная система должна быть указана!");
            return;
        }
        else
        {
            Model.StarSystemID = SelectedStarSystem.ID;
        }
        try
        {
            var result = IsEdit
                ? await ModelController.Put(ID.GetValueOrDefault(), Model)
                : await ModelController.Post(Model);

            Model = Mapper.Map<SpaceObjectEditModel>(result);
            NavigationManager.NavigateTo($"/admin/spaceobjects/{result.ID}/edit");
            Snackbar.Add("Космический объект успешно сохранён");
        }
        catch (ValidationApiException validationException)
        {
            Snackbar.Add(validationException.Message, Severity.Error);
        }
        catch (ApiException exception)
        {
            Snackbar.Add(exception.Content, Severity.Error);
        }
    }
}