@page "/admin/spaceobjects"

@using System.ComponentModel.DataAnnotations
@using Refit

<PageTitle>Космические объекты</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-2">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Color="@Color.Success"
                       Href="admin/spaceobjects/create">
                Добавить
            </MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@Models" Virtualize="true" Filter="new Func<SpaceObjectViewModel, bool>(FilterFuncInput)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Таблица</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="SearchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<SpaceObjectViewModel, object>(x => x.Name)">Название</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<SpaceObjectViewModel, object>(x => x.Age)">Возраст</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<SpaceObjectViewModel, object>(x => x.StarSystem?.Name)">Звёздная система</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<SpaceObjectViewModel, object>(x => x.Type)">Тип</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    Действия
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.Name
                </MudTd>
                <MudTd>
                    @(context.Age)
                </MudTd>
                <MudTd>
                    @(context.Type.GetAttribute<DisplayAttribute>().Name)
                </MudTd>
                <MudTd>
                    @if (context.StarSystem != null)
                    {
                        <MudChip Icon="@Icons.Material.Filled.Person"
                                 Href=@($"admin/starsystems/{context.StarSystem.ID}/info")
                                 Color="Color.Success"
                                 Size="Size.Small">
                            @(context.StarSystem.Name)
                        </MudChip>
                    }
                    else
                    {
                        <MudChip
                            Size="Size.Small">
                            не привязана
                        </MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudButton StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Warning" Href="@($"/admin/spaceobjects/{context.ID}/edit")">Изменить</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="(() => OnDeleteModel(context))">Удалить</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="Строк на странице:"/>
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {

    [Inject]
    private ISnackbar Snackbar { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    public List<SpaceObjectViewModel> ClearModels { get; set; } = new();
    public List<SpaceObjectViewModel> Models { get; set; } = new();

    public List<StarSystemViewModel> StarSystems { get; set; } = new();

    [Inject]
    public ISpaceObjectController ModelController { get; set; }

    [Inject]
    public IStarSystemController StarSystemController { get; set; }

    public bool Loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDates();
    }

    private async Task LoadDates()
    {
        try
        {
            StarSystems = await StarSystemController.Get();

            ClearModels = await ModelController.Get();
            foreach (var spaceObject in ClearModels)
            {
                spaceObject.StarSystem = StarSystems.FirstOrDefault(x => x.ID == spaceObject.StarSystemID);
            }

            Models = ClearModels;
        }
        catch (ApiException e)
        {
            Snackbar.Add("Ошибка при загрузке данных.", Severity.Error);
        }
        Loading = false;
    }

    private async Task OnDeleteModel(SpaceObjectViewModel model)
    {
        var result = await DialogService.ShowMessageBox("Подтверждение",
            $"Вы точно хотите удалить космический объект {model.Name}?", "Да", "Нет");

        if (!result.GetValueOrDefault(false))
        {
            return;
        }

        try
        {
            await ModelController.Delete(model.ID);

            await LoadDates();
            Snackbar.Add("Космический объект успешно удалён!", Severity.Success);
        }
        catch (ValidationApiException validationException)
        {
            Snackbar.Add(validationException.Content.Detail, Severity.Error);
        }
    }

    private string SearchString = "";
    private bool FilterFuncInput(SpaceObjectViewModel model) => FilterFunc(model, SearchString);

    private bool FilterFunc(SpaceObjectViewModel model, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (model.Age.ToString().Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{model.Name} {model.StarSystem?.Name} {model.Type.GetAttribute<DisplayAttribute>().Name}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}